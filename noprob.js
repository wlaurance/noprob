// Generated by CoffeeScript 1.3.3
(function() {
  var App, app, colors, exec, fs, program, watch, _;

  _ = require('underscore');

  _.str = require('underscore.string');

  program = require('commander');

  colors = require('colors');

  fs = require('fs');

  exec = require('child_process').exec;

  watch = require('watch');

  App = (function() {

    function App() {
      program.option('-x --exec [command]', 'command to execute on change', '').parse(process.argv);
      this.watchDir = '.';
      this.ignoreDotFiles = true;
      this.pollInterval = 500;
      this.lastTime = this.currentTime();
      if (process.platform === 'darwin') {
        this.setDarwinWatcher();
      } else if (!(fs.watch != null)) {
        this.setWatchWatcher();
      } else {
        this.setNodeFsWatcher();
      }
      this.run();
    }

    App.prototype.currentTime = function() {
      return Math.round(new Date().getTime() / 1000);
    };

    App.prototype.setDarwinWatcher = function() {
      var _this = this;
      return this.watcher = function(cb) {
        var piper;
        piper = exec("find -L " + _this.watchDir + " -type f -mtime -" + (_this.currentTime() - _this.lastTime) + "s -print");
        piper.stderr.on('data', function(data) {
          return process.stderr.write(data.toString());
        });
        piper.stdout.on('data', function(data) {
          var file, files, _i, _len;
          files = _.str.words(data, '\n');
          for (_i = 0, _len = files.length; _i < _len; _i++) {
            file = files[_i];
            cb(file);
          }
          return _this.lastTime = _this.currentTime() + 1;
        });
        return piper.on('exit', function(code) {
          return setTimeout((function() {
            return _this.watcher(cb);
          }), _this.pollInterval);
        });
      };
    };

    App.prototype.setWatchWatcher = function() {
      var _this = this;
      return this.watcher = function(cb) {
        return watch.watchTree(_this.watchDir, function(file, curr, prev) {
          if ((prev != null) && curr.nlink !== 0) {
            return cb(file);
          }
        });
      };
    };

    App.prototype.setNodeFsWatcher = function() {
      var _this = this;
      return this.watcher = function(cb) {
        return fs.watch(_this.watchDir, function(e, file) {
          if (e === 'change') {
            return cb(file);
          }
        });
      };
    };

    App.prototype.parsePath = function(path) {
      var cleanPath, extension, fileName;
      if (path.slice(0, 2) === './') {
        cleanPath = path.slice(2);
      }
      cleanPath = cleanPath.replace(/\ /g, '\\ ');
      fileName = cleanPath.slice(cleanPath.lastIndexOf('/') + 1);
      extension = fileName.slice(fileName.lastIndexOf('.') + 1);
      if (extension === fileName) {
        extension = '';
      }
      return [cleanPath, fileName, extension];
    };

    App.prototype.run = function() {
      var piper,
        _this = this;
      piper = null;
      return this.watcher(function(file) {
        var cleanPath, extension, fileName, _ref;
        _ref = _this.parsePath(file), cleanPath = _ref[0], fileName = _ref[1], extension = _ref[2];
        console.log(cleanPath);
        console.log(fileName);
        console.log(extension);
        if (_this.ignoreDotFiles && fileName[0] === '.') {
          return;
        }
        console.log("* Change detected.".green.bold);
        console.log("No prob, I'll take care of that...".green.italic);
        console.log('');
        if (piper != null) {
          piper.kill();
        }
        piper = exec(program.exec);
        piper.stderr.on('data', function(data) {
          console.log("* Error detected.".red.bold);
          console.log('');
          console.log(data);
          console.log('');
          return console.log("No worries, I'll wait until you're ready...".green.italic);
        });
        return piper.stdout.on('data', function(data) {
          return console.log(data);
        });
      });
    };

    return App;

  })();

  app = new App();

}).call(this);
