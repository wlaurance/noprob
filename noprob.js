// Generated by CoffeeScript 1.3.3
(function() {
  var colors, currentTime, exec, execAndPipe, fs, watch, _;

  _ = require('underscore');

  _.str = require('underscore.string');

  colors = require('colors');

  fs = require('fs');

  exec = require('child_process').exec;

  watch = require('watch');

  execAndPipe = function(execString) {
    var piper;
    piper = exec(execString);
    piper.stderr.on('data', function(data) {
      return process.stderr.write(data.toString());
    });
    return piper.stdout.on('data', function(data) {
      return process.stdout.write(data.toString());
    });
  };

  currentTime = function() {
    return Math.round(new Date().getTime() / 1000);
  };

  exports.run = function() {
    var lastTime, pollInterval, watchDir, watcher;
    watchDir = '.';
    pollInterval = 500;
    lastTime = currentTime();
    if (process.platform === 'darwin' && false) {
      watcher = function(cb) {
        var piper;
        piper = exec("find -L " + watchDir + " -type f -mtime -" + (currentTime() - lastTime) + "s -print");
        piper.stderr.on('data', function(data) {
          return process.stderr.write(data.toString());
        });
        piper.stdout.on('data', function(data) {
          var file, files, _i, _len;
          files = _.str.words(data, '\n');
          for (_i = 0, _len = files.length; _i < _len; _i++) {
            file = files[_i];
            cb(file);
          }
          return lastTime = currentTime() + 1;
        });
        return piper.on('exit', function(code) {
          return setTimeout((function() {
            return watcher(cb);
          }), pollInterval);
        });
      };
    } else if (!(fs.watch != null) || true) {
      watcher = function(cb) {
        return watch.watchTree(watchDir, function(file, curr, prev) {
          if ((prev != null) && curr.nlink !== 0) {
            return cb(file);
          }
        });
      };
    } else {
      watcher = function(cb) {
        return fs.watch(watchDir, function(e, file) {
          if (e === 'change') {
            return cb(file);
          }
        });
      };
    }
    return watcher(function(file) {
      console.log("* Change detected.".green.bold);
      return console.log("No prob, I'll take care of that...".green.italic);
    });
  };

}).call(this);
